@startuml
interface Interfaces.Adjectiveable {
+ String beAdjective()
}
class Materials.Marble {
+ void consitsOf(Substance)
+ Substance[] othersInside(Substance,Substance)
+ String beAdjective()
+ String whatInside()
}
enum Enums.INSTRUMENTS {
+  Puncher
+  dottedLineMachine
+  Mallet
+  Scarpel
+  Hammer
+  Chisel
- String instrument
+ String getInstrument()
+ String toString()
}
class Content.Boulder {
+ Substance toBeDescrition()
+ String toBe(Boolean,int)
}
class People.ViktorC {
+ void drink(TIME)
+ void laugh(boolean)
+ Boolean beDrunkard()
+ void drink()
+ Boolean beMaster()
+ boolean beDrunkardMaster()
}
class Professions.StoneCutter {
- int machineNum
+ StoneCutter beArmedWith(int,TIME)
+ StoneCutter constrict(Materials)
+ void takes(int[])
+ void incorrectMove()
+ void takeOn(TIME,Substance)
+ StoneCutter handle(Substance)
+ int getMachineNum()
+ void setMachineNum(int)
}
class Content.Music {
+ PLACE faded()
}
class Professions.Official {
+ void hide(TIME,Substance,Materials)
}
class Content.Notch {
}
class Content.Work {
- STATUS[] statuses
+ STATUS[] getStatuses()
+ void setStatuses(STATUS[])
+ void finalStage(Stage)
+ String toString()
}
class Content.Branch {
}
abstract class Professions.Profession {
- String name
- STATUS status
+ String getName()
+ STATUS getStatus()
+ void setStatus(STATUS)
}
class People.ViktorD {
+ void laugh(boolean)
}
class Content.Specie {
+ String whatInside()
}
class Materials.Cloth {
- String color
+ String getColor()
+ void setColor(String)
+ String getName()
}
class Main {
+ {static} void main(String[])
}
interface Interfaces.BeDrunkardMaster {
+ boolean beDrunkardMaster()
}
abstract class Materials.Materials {
- String name
+ String getName()
}
class Professions.Molder {
+ Substance cast(Substance,Monument,Materials)
}
class People.Lenin {
+ void toSqueeze(Cap)
+ void laugh(boolean)
}
class People.Lenin.Arm {
- String fist
+ String getFist()
}
class Professions.Sculptor {
+ String make(Materials[])
+ void sculptorMade(Materials[])
+ Monument sculptorMade(Substance)
+ Person toBePerson(Person)
+ String toBe(Boolean,int)
+ String toString()
}
abstract class People.Person {
- String firstName
- String secondName
- Profession[] professions
+ String getFirstName()
+ String getSecondName()
+ Profession[] getProfessions()
+ void setProfessions(Profession[])
+ String getFirstSecondName()
+ {abstract}void laugh(boolean)
}
interface Interfaces.Exists {
~ String toBe(Boolean,int)
}
class Content.Clot {
}
enum Enums.STATUS {
+  NORMAL
+  INDIFFERENCE
+  HOPELESSNESS
+  UNHAPPY
+  BROKEN
+  FUTURE
+  FINAL
+  ACCURACY
+  RESPONSIBLE
+  FADED
+  UNPUBLISHED
+  PUBLISHED
+  LITTERED
+  UNLITTERED
+  DIFFERENT
- String status
+ String getStatus()
+ String toString()
}
class Emotional.Fear {
+ void change(PLACE,TIME,Emotion)
}
class Exeptions.OutOfMachines {
}
enum Enums.PLACE {
+  SQUARE
+  LENINGRAD
+  SILENCE
+  FACE
+  NOWHERE
+  STONE
+  NOPLACE
- String place
+ String getPlace()
+ String toString()
}
class Content.Surface {
}
class People.NoName {
- boolean negative
+ void remove(Substance)
+ void copy(Substance)
+ void laughTimePlace(TIME,PLACE)
+ void laughPlace(PLACE)
+ String getFirstName()
+ void laugh(boolean)
}
interface Interfaces.WhatInside {
+ String whatInside()
}
class Materials.Facture {
+ String beAdjective()
}
class Materials.Clay {
+ String beAdjective()
}
class Materials.Gypsum {
+ String beAdjective()
}
interface Interfaces.BeDrunkard {
+ Boolean beDrunkard()
+ void drink()
}
class People.Lihachev {
- Profession profession
- Set<Person> friendSet
+ void checkFriendList()
+ Profession whatProfession()
+ void drink(TIME)
+ void laugh(boolean)
+ Boolean beDrunkard()
+ void drink()
+ Boolean beMaster()
+ boolean beDrunkardMaster()
}
class Content.Conture {
+ void contureOf(Substance,STATUS)
+ String toBe(Boolean,int)
+ String toBeDefined()
}
class People.Human {
+ void beDrunkMaster(BeDrunkardMaster,BeDrunkardMaster)
+ void toBeLaughPerson(Person)
+ void laugh(boolean)
}
abstract class Emotional.Emotion {
- String name
- STATUS[] status
+ String getName()
+ String toString()
+ STATUS[] getStatus()
+ void setStatus(STATUS[])
}
class Content.Monument {
+ void toBePublished(TIME)
+ void toBeBorn()
+ String toBe(Boolean,int)
}
enum Enums.TIME {
+  MINUTE
+  MORNING
+  OVERNIGHT
+  GRADUALLY
+  EVERYDAY
+  OPPORTUNITY
+  OCCASIONALLY
+  HASTILY
+  AGAIN
+  LATER
+  AFTER
- String time
+ String getTime()
+ String toString()
}
class Emotional.Grimace {
}
class Materials.Wood {
+ String beAdjective()
}
class StringMethods.StringMeth {
+ {static} String capitalize(String)
+ {static} String dot(String)
+ {static} String dotn(String)
}
abstract class Content.Substance {
- String name
- Adjectiveable adj
- STATUS status
+ String getName()
+ Adjectiveable getAdj()
+ STATUS getStatus()
+ void setStatus(STATUS)
+ int hashCode()
+ boolean equals(Object)
}
interface Interfaces.BeMaster {
+ Boolean beMaster()
}
class Content.Stage {
+ String await()
}
class People.Me {
+ void disturbed(TIME)
+ Set<Person> enlistedToBrigada(Profession,Set<Person>)
+ void countPersonInBrigada(Set<Person>)
+ String toBe(Boolean,int)
+ void laugh(boolean)
}
class Materials.Cap {
+ {static} String getCap(byte)
+ void removeCap(TIME)
}
class Content.Figure {
+ String toString()
+ String toBe(Boolean,int)
}
class Professions.Master {
}
class Content.Machine {
+ {static} String[] machines
+ void named(int)
+ Machine thisMachine(int)
+ void withHelp()
+ Notch makeNotch(PLACE)
+ String toString()
}
interface Interfaces.BeDefined {
+ String toBeDefined()
}
class Professions.Brigadier {
}
class Professions.Chief {
+ void cover(Materials[])
}
class Professions.Chief.Head {
- String head
+ String cover(Materials[])
}


Interfaces.Adjectiveable <|.. Materials.Marble
Interfaces.WhatInside <|.. Materials.Marble
Materials.Materials <|-- Materials.Marble
Interfaces.Exists <|.. Content.Boulder
Content.Substance <|-- Content.Boulder
Interfaces.BeDrunkardMaster <|.. People.ViktorC
People.Person <|-- People.ViktorC
Professions.Profession <|-- Professions.StoneCutter
Content.Substance <|-- Content.Music
Professions.Profession <|-- Professions.Official
Content.Substance <|-- Content.Notch
Content.Substance <|-- Content.Work
Content.Substance <|-- Content.Branch
People.Person <|-- People.ViktorD
Interfaces.WhatInside <|.. Content.Specie
Content.Substance <|-- Content.Specie
Materials.Materials <|-- Materials.Cloth
Interfaces.BeDrunkard <|-- Interfaces.BeDrunkardMaster
Interfaces.BeMaster <|-- Interfaces.BeDrunkardMaster
Professions.Profession <|-- Professions.Molder
People.Person <|-- People.Lenin
People.Lenin +.. People.Lenin.Arm
Interfaces.Exists <|.. Professions.Sculptor
Professions.Profession <|-- Professions.Sculptor
Content.Substance <|-- Content.Clot
Emotional.Emotion <|-- Emotional.Fear
Exeptions.Exception <|-- Exeptions.OutOfMachines
Content.Substance <|-- Content.Surface
People.Person <|-- People.NoName
Interfaces.Adjectiveable <|.. Materials.Facture
Materials.Materials <|-- Materials.Facture
Interfaces.Adjectiveable <|.. Materials.Clay
Materials.Materials <|-- Materials.Clay
Interfaces.Adjectiveable <|.. Materials.Gypsum
Materials.Materials <|-- Materials.Gypsum
Interfaces.BeDrunkardMaster <|.. People.Lihachev
People.Person <|-- People.Lihachev
Interfaces.Exists <|.. Content.Conture
Interfaces.BeDefined <|.. Content.Conture
Content.Substance <|-- Content.Conture
People.Person <|-- People.Human
Interfaces.Exists <|.. Content.Monument
Content.Substance <|-- Content.Monument
Emotional.Emotion <|-- Emotional.Grimace
Interfaces.Adjectiveable <|.. Materials.Wood
Materials.Materials <|-- Materials.Wood
Content.Substance <|-- Content.Stage
Interfaces.Exists <|.. People.Me
People.Person <|-- People.Me
Materials.Materials <|-- Materials.Cap
Interfaces.Exists <|.. Content.Figure
Content.Substance <|-- Content.Figure
Professions.Profession <|-- Professions.Master
Content.Substance <|-- Content.Machine
Professions.Profession <|-- Professions.Brigadier
Professions.Profession <|-- Professions.Chief
Professions.Chief +.. Professions.Chief.Head
@enduml